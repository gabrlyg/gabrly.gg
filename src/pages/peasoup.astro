<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="gabrlyg's playground" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/assets/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>WTB: Peasoup (T)</title>
  </head>
  <body>
    <script>
      import * as THREE from 'three';

      const PEASOUP_IMG_PATH = 'assets/peasoup.jpeg';
      const TEXT_IMG_PATH = 'assets/wtb-peasoup.svg';
      const INITIAL_Z_POSITION = -100;

      type ObjectEntry = {
        type: 'text' | 'peasoup';
      };

      const objects: ObjectEntry[] = Array.from({ length: 500 }, () => {
        const isText = Math.random() > 0.2;
        return {
          type: isText ? 'text' : 'peasoup',
        };
      });

      function init() {
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(
          75,
          window.innerWidth / window.innerHeight,
          0.1,
          1000
        );
        camera.position.z = 0;

        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        objects.forEach((obj) => {
          const mesh = createObject(obj);
          mesh.position.set(
            (Math.random() - 0.5) * 100,
            (Math.random() - 0.5) * 100,
            (Math.random() - 0.5) * 100
          );
          scene.add(mesh);
        });

        function animate() {
          requestAnimationFrame(animate);

          // Move all objects towards the camera
          scene.children.forEach((mesh) => {
            mesh.position.z += 0.2;

            // Check if the object has moved beyond the camera's view
            if (mesh.position.z > 5) {
              // move the item back to far away in front of the camera
              // to create an illusion of an infinite universe of Peasoup (T)
              mesh.position.z = INITIAL_Z_POSITION + (mesh.position.z - 5);
              mesh.position.x = (Math.random() - 0.5) * 100;
              mesh.position.y = (Math.random() - 0.5) * 100;
            }
          });

          renderer.render(scene, camera);
        }

        animate();
      }

      function createObject(obj: ObjectEntry): THREE.Mesh {
        let mesh: THREE.Mesh;
        if (obj.type === 'text') {
          mesh = createImageMesh(TEXT_IMG_PATH, 1, 1);
        } else {
          mesh = createImageMesh(PEASOUP_IMG_PATH, 3.33, 2.66);
        }
        return mesh;
      }

      function createImageMesh(
        imagePath: string,
        width: number,
        height: number
      ) {
        const loader = new THREE.TextureLoader();
        const texture = loader.load(imagePath, (tex) => {
          tex.needsUpdate = true;
        });

        const geometry = new THREE.PlaneGeometry(width, height);
        const material = new THREE.MeshBasicMaterial({
          map: texture,
          transparent: true,
        });
        const mesh = new THREE.Mesh(geometry, material);
        return mesh;
      }

      init();
    </script>
  </body>
</html>
